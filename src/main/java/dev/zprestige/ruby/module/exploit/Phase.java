package dev.zprestige.ruby.module.exploit;

import dev.zprestige.ruby.eventbus.annotation.RegisterListener;
import dev.zprestige.ruby.events.MoveEvent;
import dev.zprestige.ruby.events.PacketEvent;
import dev.zprestige.ruby.module.Module;
import dev.zprestige.ruby.setting.impl.BooleanSetting;
import dev.zprestige.ruby.setting.impl.FloatSetting;
import dev.zprestige.ruby.setting.impl.IntegerSetting;
import dev.zprestige.ruby.setting.impl.KeySetting;
import dev.zprestige.ruby.util.EntityUtil;
import dev.zprestige.ruby.util.Timer;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import org.lwjgl.input.Keyboard;

import java.util.Objects;
import java.util.function.Predicate;

public class Phase extends Module {
    public final Slider timerAmount = Menu.Switch("Timer Amount", 1.0f, 0.1f, 10.0f);
    public final Switch checkHitBox = Menu.Switch("Check Hit Box", false);
    public final Switch offGround = Menu.Switch("Off Ground", false);
    public final Switch confirmTeleports = Menu.Switch("ConfirmTeleports", false);
    public final Switch move = Menu.Switch("Move", false);
    public final Slider horizontalFactor = Menu.Switch("HorizontalFactor", 1.0f, 0.1f, 10.0f, (Predicate<Float>) v -> move.getValue());
    public final Slider verticalFactor = Menu.Switch("Vertical Factor", 1.0f, 0.1f, 10.0f, (Predicate<Float>) v -> move.getValue());
    public final Switch verticalDown = Menu.Switch("Vertical Down", false, v -> move.getValue());
    public final Switch packetCheck = Menu.Switch("Packet Check", false);
    public final Slider maxPackets = Menu.Switch("Max Packets", 10, 1, 100, (Predicate<Integer>) v -> packetCheck.getValue());
    public KeySetting bypassKey = Menu.Switch("Bypass Key", Keyboard.KEY_NONE);
    public final Switch disableAfterBypass = Menu.Switch("Disable After Bypass", false);

    public Timer timer = new Timer();
    public boolean i;
    public int packets;

    @Override
    public void onEnable() {
        i = false;
        packets = 0;
        timer.setTime(0);
        mc.timer.tickLength = 50.0f / timerAmount.getValue();
    }

    @Override
    public void onDisable() {
        mc.player.setVelocity(0.0, 0.0, 0.0);
        mc.timer.tickLength = 50.0f;
    }

    @Override
    public void onTick() {
        if (packetCheck.getValue() && packets >= maxPackets.getValue())
            disableModule("Too many packets received, disabling Phase.");

        if (checkHitBox.getValue() && mc.world.getCollisionBoxes(mc.player, mc.player.getEntityBoundingBox().expand(-0.0625, 0.0, -0.0625)).isEmpty())
            return;
        mc.player.setVelocity(0.0, 0.0, 0.0);
        mc.player.noClip = true;
        mc.player.onGround = !offGround.getValue();

        if (bypassKey.getKey() != -1 && Keyboard.isKeyDown(bypassKey.getKey()))
            i = true;

        if (i) {
            mc.player.motionY = -0.025;
            if (timer.getTime(500)) {
                mc.player.motionY -= 100;
                mc.player.jump();
                if (disableAfterBypass.getValue())
                    disableModule();
                else {
                    i = false;
                }
            }
        } else
            timer.setTime(0);
        if (move.getValue()) {
            if (mc.gameSettings.keyBindJump.isKeyDown()) {
                mc.player.motionY = verticalFactor.getValue() / 100.0f;
            }
            if (verticalDown.getValue() && mc.gameSettings.keyBindSneak.isKeyDown()) {
                mc.player.motionY = -(verticalFactor.getValue() / 100.0f);
            }
        }
    }

    @RegisterListener
    public void onPacketReceive(PacketEvent.PacketReceiveEvent event) {
        if (nullCheck() || !isEnabled())
            return;
        if (event.getPacket() instanceof SPacketPlayerPosLook) {
            if (confirmTeleports.getValue())
                Objects.requireNonNull(mc.getConnection()).sendPacket(new CPacketConfirmTeleport(((SPacketPlayerPosLook) event.getPacket()).getTeleportId() + 1));
            packets++;
        }

    }

    @RegisterListener
    public void onMove(MoveEvent event) {
        if (nullCheck() || !isEnabled() || !move.getValue())
            return;
        double[] horizontal = EntityUtil.getSpeed(horizontalFactor.getValue() / 10.0f);
        event.motionX = horizontal[0];
        event.motionZ = horizontal[1];
    }
}
