package dev.zprestige.ruby.module.exploit;

import dev.zprestige.ruby.eventbus.annotation.RegisterListener;
import dev.zprestige.ruby.events.ChorusEvent;
import dev.zprestige.ruby.module.Category;
import dev.zprestige.ruby.module.Module;
import dev.zprestige.ruby.module.ModuleInfo;
import dev.zprestige.ruby.setting.impl.*;
import dev.zprestige.ruby.util.AnimationUtil;
import dev.zprestige.ruby.util.BlockUtil;
import dev.zprestige.ruby.util.RenderUtil;
import dev.zprestige.ruby.util.Timer;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;

import java.awt.*;

@ModuleInfo(name = "ChorusPredict", category = Category.Exploit, description = "predicts and renders where chorus goes")
public class ChorusPredict extends Module {
    public IntegerSetting removeDelay = createSetting("Remove Delay", 1000, 0, 10000);
    public ParentSetting misc = createSetting("Misc");
    public BooleanSetting rotateToPos = createSetting("Rotate To Pos", false).setParent(misc);
    public BooleanSetting rotateOnlyIfSafe = createSetting("Rotate Only If Safe", false, v -> rotateToPos.getValue()).setParent(misc);
    public ParentSetting rendering = createSetting("Rendering");
    public ColorSetting boxColor = createSetting("Box Color", new Color(-1)).setParent(rendering);
    public ColorSetting outlineColor = createSetting("Outline Color", new Color(-1)).setParent(rendering);
    public FloatSetting outlineWidth = createSetting("Outline Width", 1.0f, 0.1f, 5.0f).setParent(rendering);
    public Timer removeTimer = new Timer();
    public double x;
    public double y;
    public double z;
    public float f;

    @RegisterListener
    public void onChorus(ChorusEvent event) {
        if (nullCheck() || !isEnabled())
            return;
        if (mc.player.getDistanceSq(new BlockPos(event.x, event.y, event.z)) < 4.0f)
            return;
        x = event.x;
        y = event.y;
        z = event.z;
        f = 0.0f;
        removeTimer.setTime(0);
        if (rotateToPos.getValue()) {
            if (rotateOnlyIfSafe.getValue() && !BlockUtil.isPlayerSafe(mc.player))
                return;
            posRotate(new BlockPos(x, y, z));
        }
    }


    public void posRotate(BlockPos pos) {
        float[] angle = BlockUtil.calcAngle(mc.player.getPositionEyes(mc.getRenderPartialTicks()), new Vec3d((float) pos.getX() + 0.5f, (float) pos.getY() - 0.5f, (float) pos.getZ() + 0.5f));
        mc.player.rotationYaw = angle[0];
        mc.player.rotationPitch = angle[1];
    }

    @Override
    public void onGlobalRenderTick() {
        if (removeTimer.getTimeSub(removeDelay.getValue())) {
            f = AnimationUtil.increaseNumber(f, 2.0f, 0.02f);
            AxisAlignedBB bb = new AxisAlignedBB(new BlockPos(x, y, z));
            RenderUtil.drawBBBoxWithHeight(bb, boxColor.getValue(), boxColor.getValue().getAlpha(), f);
            RenderUtil.drawBlockOutlineBBWithHeight(bb, outlineColor.getValue(), outlineWidth.getValue(), f);
        }
    }
}
