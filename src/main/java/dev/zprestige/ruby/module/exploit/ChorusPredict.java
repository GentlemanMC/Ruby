package dev.zprestige.ruby.module.exploit;

import dev.zprestige.ruby.eventbus.annotation.RegisterListener;
import dev.zprestige.ruby.events.ChorusEvent;
import dev.zprestige.ruby.module.Module;
import dev.zprestige.ruby.settings.impl.ColorBox;
import dev.zprestige.ruby.settings.impl.Parent;
import dev.zprestige.ruby.settings.impl.Slider;
import dev.zprestige.ruby.settings.impl.Switch;
import dev.zprestige.ruby.util.AnimationUtil;
import dev.zprestige.ruby.util.BlockUtil;
import dev.zprestige.ruby.util.RenderUtil;
import dev.zprestige.ruby.util.Timer;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;

public class ChorusPredict extends Module {
    public final Slider removeDelay = Menu.Slider("Remove Delay", 0, 10000);
    public final Parent misc = Menu.Parent("Misc");
    public final Switch rotateToPos = Menu.Switch("Rotate To Pos").parent(misc);
    public final Switch rotateOnlyIfSafe = Menu.Switch("Rotate Only If Safe").parent(misc);
    public final Parent rendering = Menu.Parent("Rendering");
    public final ColorBox boxColor = Menu.Color("Box Color").parent(rendering);
    public final ColorBox outlineColor = Menu.Color("Outline Color").parent(rendering);
    public final Slider outlineWidth = Menu.Slider("Outline Width", 0.1f, 5.0f).parent(rendering);
    public Timer removeTimer = new Timer();
    public double x;
    public double y;
    public double z;
    public float f;

    @RegisterListener
    public void onChorus(ChorusEvent event) {
        if (nullCheck() || !isEnabled())
            return;
        if (mc.player.getDistanceSq(new BlockPos(event.x, event.y, event.z)) < 4.0f)
            return;
        x = event.x;
        y = event.y;
        z = event.z;
        f = 0.0f;
        removeTimer.setTime(0);
        if (rotateToPos.GetSwitch()) {
            if (rotateOnlyIfSafe.GetSwitch() && !BlockUtil.isPlayerSafe(mc.player))
                return;
            posRotate(new BlockPos(x, y, z));
        }
    }


    public void posRotate(BlockPos pos) {
        float[] angle = BlockUtil.calcAngle(mc.player.getPositionEyes(mc.getRenderPartialTicks()), new Vec3d((float) pos.getX() + 0.5f, (float) pos.getY() - 0.5f, (float) pos.getZ() + 0.5f));
        mc.player.rotationYaw = angle[0];
        mc.player.rotationPitch = angle[1];
    }

    @Override
    public void onFrame(float partialTicks) {
        if (removeTimer.getTimeSub((long) removeDelay.GetSlider())) {
            f = AnimationUtil.increaseNumber(f, 2.0f, 0.02f);
            AxisAlignedBB bb = new AxisAlignedBB(new BlockPos(x, y, z));
            RenderUtil.drawBBBoxWithHeight(bb, boxColor.GetColor(), boxColor.GetColor().getAlpha(), f);
            RenderUtil.drawBlockOutlineBBWithHeight(bb, outlineColor.GetColor(), outlineWidth.GetSlider(), f);
        }
    }
}
