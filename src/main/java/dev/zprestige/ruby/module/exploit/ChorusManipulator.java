package dev.zprestige.ruby.module.exploit;

import dev.zprestige.ruby.Ruby;
import dev.zprestige.ruby.eventbus.annotation.RegisterListener;
import dev.zprestige.ruby.events.PacketEvent;
import dev.zprestige.ruby.module.Module;
import dev.zprestige.ruby.settings.impl.ColorBox;
import dev.zprestige.ruby.settings.impl.Slider;
import dev.zprestige.ruby.util.AnimationUtil;
import dev.zprestige.ruby.util.RenderUtil;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;

import java.util.LinkedList;
import java.util.Objects;
import java.util.Queue;

public class ChorusManipulator extends Module {
    public static ChorusManipulator Instance;
    public final ColorBox boxColor = Menu.Color("Box Color");
    public final ColorBox outlineColor = Menu.Color("Outline Color");
    public final Slider outlineWidth = Menu.Slider("Outline Width", 0.1f, 5.0f);
    public Queue<CPacketPlayer> packets = new LinkedList<>();
    public Queue<CPacketConfirmTeleport> tpPackets = new LinkedList<>();
    public double x;
    public double y;
    public double z;
    public float f;

    public ChorusManipulator() {
        Instance = this;
    }

    @RegisterListener
    public void onPacketEvent(PacketEvent event) {
        if (!isEnabled() || nullCheck())
            return;
        if (event.getPacket() instanceof SPacketPlayerPosLook) {
            x = ((SPacketPlayerPosLook) event.getPacket()).getX();
            y = ((SPacketPlayerPosLook) event.getPacket()).getY();
            z = ((SPacketPlayerPosLook) event.getPacket()).getZ();
            f = 0.0f;
            event.setCancelled(true);
        }
        if (event.getPacket() instanceof CPacketPlayer) {
            packets.add((CPacketPlayer) event.getPacket());
            event.setCancelled(true);
        }
        if (event.getPacket() instanceof CPacketConfirmTeleport) {
            tpPackets.add((CPacketConfirmTeleport) event.getPacket());
            event.setCancelled(true);
        }
    }

    @Override
    public void onDisable() {
        while (!packets.isEmpty()) {
            Objects.requireNonNull(mc.getConnection()).sendPacket(Objects.requireNonNull(packets.poll()));
        }
        while (!tpPackets.isEmpty())
            Objects.requireNonNull(mc.getConnection()).sendPacket(Objects.requireNonNull(tpPackets.poll()));

    }

    @Override
    public void onFrame(float partialTicks) {
        f = AnimationUtil.increaseNumber(f, 2.0f, 0.02f);
        AxisAlignedBB bb = new AxisAlignedBB(new BlockPos(x, y, z));
        RenderUtil.drawBBBoxWithHeight(bb, boxColor.GetColor(), boxColor.GetColor().getAlpha(), f);
        RenderUtil.drawBlockOutlineBBWithHeight(bb, outlineColor.GetColor(), outlineWidth.GetSlider(), f);
    }

    @Override
    public void onFrame2D() {
        int width = new ScaledResolution(mc).getScaledWidth();
        int height = new ScaledResolution(mc).getScaledHeight();
        Ruby.fontManager.drawStringWithShadow("Manipulating chorus... " + packets.size() + " | " + tpPackets.size(), (width / 2f) - (Ruby.fontManager.getStringWidth("Manipulating chorus... " + packets.size() + " | " + tpPackets.size()) / 2f), (height / 2f) + 10, -1);
    }
}