package dev.zprestige.ruby.module.exploit;

import dev.zprestige.ruby.eventbus.annotation.RegisterListener;
import dev.zprestige.ruby.events.MoveEvent;
import dev.zprestige.ruby.events.PacketEvent;
import dev.zprestige.ruby.module.Module;
import dev.zprestige.ruby.setting.impl.BooleanSetting;
import dev.zprestige.ruby.setting.impl.ColorSetting;
import dev.zprestige.ruby.setting.impl.FloatSetting;
import dev.zprestige.ruby.setting.impl.IntegerSetting;
import dev.zprestige.ruby.util.BlockUtil;
import dev.zprestige.ruby.util.EntityUtil;
import dev.zprestige.ruby.util.RenderUtil;
import net.minecraft.init.Blocks;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.math.BlockPos;

import java.awt.*;
import java.util.function.Predicate;

public class PhaseDe06d extends Module {
    public FloatSetting horizontalFactor = createSetting("Horizontal Factor", 1.0f, 0.1f, 50.0f);
    public FloatSetting downFactor = createSetting("Down Factor", 1.0f, 0.1f, 10.0f);
    public BooleanSetting packetLimiter = createSetting("Packet Limiter", false);
    public IntegerSetting packetLimit = createSetting("Packet Limit", 5, 0, 20, (Predicate<Integer>) v -> packetLimiter.getValue());
    public IntegerSetting packetLimitRestartValue = createSetting("Packet Limit Restart Value", 2, 0, 5, (Predicate<Integer>) v -> packetLimiter.getValue());
    public BooleanSetting showGaps = createSetting("Show Gaps", false);
    public ColorSetting gapColor = createSetting("Gap Color", new Color(-1), v -> showGaps.getValue());
    public int rubberbandPackets = 0;

    @RegisterListener
    public void onMove(MoveEvent event) {
        if (nullCheck() || !isEnabled())
            return;
        mc.player.noClip = true;
        if (packetLimiter.getValue() && rubberbandPackets >= packetLimit.getValue()) {
            event.setMotion(0, 0, 0);
            rubberbandPackets = (rubberbandPackets >= packetLimit.getValue() + packetLimitRestartValue.getValue()) ? 0 : rubberbandPackets + 1;
            return;
        }
        double[] motion = EntityUtil.getSpeed(horizontalFactor.getValue() / 100.0);
        event.setMotion(motion[0], mc.gameSettings.keyBindSneak.isKeyDown() ? -downFactor.getValue() / 100.0 : 0.0, motion[1]);
    }

    @RegisterListener
    public void onPacketReceive(PacketEvent.PacketReceiveEvent event) {
        if (nullCheck() || !isEnabled() || !(event.getPacket() instanceof SPacketPlayerPosLook) || !packetLimiter.getValue())
            return;
        rubberbandPackets++;
    }

    @Override
    public void onGlobalRenderTick() {
        if (!showGaps.getValue())
            return;
        BlockPos pos = BlockUtil.getPlayerPos();
        if (mc.world.getBlockState(pos.down()).getBlock().equals(Blocks.AIR))
            RenderUtil.drawFullBox(true, true, gapColor.getValue(), gapColor.getValue(), 1, pos.down());
    }
}
